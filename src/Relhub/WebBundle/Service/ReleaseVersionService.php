<?php

namespace Relhub\WebBundle\Service;

use Relhub\WebBundle\Entity\ReleaseVersion;
use Relhub\WebBundle\Entity\CommandResult;

/**
 * TestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReleaseVersionService
{

  private $buildService;
  private $entityManager;
  public function __construct($entityManager, $buildService) {
    $this->entityManager = $entityManager;
    $this->buildService = $buildService;
  }

  public function getCommands($id) {

//releaseId


/*    $query = 'select c from RelhubWebBundle:CommandResult c where releaseId = :releaseId';
    $commands = $this->getEntityManager()->createQuery($query)
      ->setParameter('releaseId', $id)
      ->execute()
      ->fetchAll();*/

/*     $query = $this->getEntityManager()->createQuery(
       'select c FROM RelhubWebBundle:CommandResult c where releaseId = :releaseId'
            
          )->setParameter('releaseId', $id);

        $commands = $query->getResult();
 */


    $em = $this->entityManager;
        $query = $em->createQuery(
            'SELECT r
            FROM RelhubWebBundle:CommandResult r
            where r.releaseId = :releaseId
            '
          )->setParameter('releaseId', $id);

        $commands = $query->getResult();

    return $commands;

  }

  public function getReleasesForDisplay() {

    $buildService = $this->buildService;

    $em = $this->entityManager;
    $query = $em->createQuery(
        'SELECT r
        FROM RelhubWebBundle:ReleaseVersion r
        where r.status != :published
        ORDER BY r.project ASC, r.dueDate'
      )->setParameter('published', ReleaseVersion::STATUS_PUBLISHED);

    $releases = $query->getResult();

    $outReleases = array();
    foreach ($releases as $release) {
      $commands = $this->getCommands($release->getId());
      $actionsArray = $release->getActionsArray();
      $outRelease = array('release'=>array('name'=>$release->getName(), 'id'=>$release->getId()));
      $outActions = array();

      foreach ($actionsArray as $stage => $stageActions) {
        if(empty($stageActions))  {
          continue;
        }

        foreach ($stageActions as $action) {
          $actionRender = array('action'=>$action['name'], 'stage'=>$stage, 'command'=>array('status'=>false), 'isApprovable'=>FALSE);
          foreach ($commands as $command) {
//            var_dump('matching command command stage :: ' . $command->getStage() . ' -- action = '. $command->getAction() . ' - status = ' . $command->getStatus() . ' - to '.$stage .' - '.$action);
            //if ($command->getStage() == $stage && $command->getAction() == $action) {
            if(trim($command->getAction()) == trim($action['name']) && $command->getStage() == $stage) {
              $actionRender['command'] = array(
                'status'=>$command->getStatus(),
                'user'=>$command->getUser(),
                'created'=>$command->getCreated(),
                'output'=>$command->getOutput(),
                'successful'=>$command->isSuccessful(),
                'manual'=>$command->isManual(),
                'id'=>$command->getId()
              );
              break;
            }
          }

          if (!isset($outActions[$stage]) || !is_array($outActions[$stage])) {
            $outActions[$stage] = array();
          }
          $outActions[$stage][] = $actionRender;            
        }
      }

      $stages = array_keys($outActions);
      $hasFailures = false;
      $allSuccesful = false;
      foreach ($stages as $stage) {
        $allDone = TRUE;
        $currentStage = $stage;
        foreach ($outActions[$stage] as $action) {
          if (!$action['command'] || !$action['command']['status'] || $action['command']['status']==CommandResult::STATUS_FAILED) {
            break 2;  // break stages foreach.
          }
        }
      }
      
      $hasApprovable = FALSE;
      $hasBuildable = FALSE;
      $failedStages = array();
      $successfulStages = array();
      foreach ($outActions as $stage=>$actions) {

        $failedCommands = 0;
        $successfulCommands = 0;
        foreach ($actions as $key=>$action) {
          if ($stage==$currentStage) {

//           var_dump('command for :: ' . $action['action'] . ' for release '. $release->getName());
            
           // var_dump($action['command']);
            if (!$action['command']['status']) {
              $command = $buildService->getCommandForAction($action['action']);
              if ($command->isManualAction()) {
                $outActions[$stage][$key]['isApprovable'] = TRUE;
                $hasApprovable = TRUE;
              }
              else {
                $hasBuildable = TRUE;
              }
            }
          }


          if ($action['command']['status']) {
            if ($action['command']['status'] == CommandResult::STATUS_SUCCESSFUL || 
                $action['command']['status'] == CommandResult::STATUS_APPROVED
            ) {
              $successfulCommands ++;
            }
            elseif ($action['command']['status'] == CommandResult::STATUS_FAILED) {
              $failedCommands ++;
            }
          }           
        }

        var_dump('successful :: ' . $successfulCommands);

        if ($failedCommands >0) {
          $failedStages []= $stage;
        }
        elseif ($successfulCommands == count($actions)) {
          $successfulStages []= $stage;
        }
      }


      $outRelease['hasApprovable'] = $hasApprovable;
      $outRelease['hasBuildable'] = $hasBuildable;
      $outRelease['actions'] = $outActions;
      $outRelease['stages'] = array_keys($outActions);
      $outRelease['currentStage'] = $currentStage;
      $outRelease['failedStages'] = $failedStages;
      $outRelease['successfulStages'] = $successfulStages;
      $outReleases []= $outRelease;
    }

    return $outReleases;
  }


  public function getReleasesCurrentStage($release) { 
    $commands = $this->getCommands($release->getId());
    $actionsArray = $release->getActionsArray();    
    $outActions = array();

    foreach ($actionsArray as $stage => $stageActions) {
      if(empty($stageActions))  {
        continue;
      }

      foreach ($stageActions as $action) {
        $actionRender = array('action'=>$action, 'stage'=>$stage, 'command'=>array('status'=>FALSE), 'isApprovable'=>FALSE);
        foreach ($commands as $command) {
          //if ($command->getStage() == $stage && $command->getAction() == $action) {
          if(trim($command->getAction()) == trim($action['name']) && $command->getStage() == $stage) {
            $actionRender['command'] = array('status'=>$command->getStatus());
            break;
          }
        }

        if (!isset($outActions[$stage]) || !is_array($outActions[$stage])) {
          $outActions[$stage] = array();
        }
        $outActions[$stage][] = $actionRender;            
      }
    }

    $stages = array_keys($outActions);
    foreach ($stages as $stage) {
      $allDone = TRUE;
      $currentStage = $stage;
      foreach ($outActions[$stage] as $action) {
        if (!$action['command'] || !$action['command']['status'] || $action['command']['status']==CommandResult::STATUS_FAILED) {
          break 2;  // break stages foreach.
        }
      }
    }
    return $currentStage;
  }

  public function getBuildableActionsForStage($release, $stage) {

    $commands = $this->getCommands($release->getId());
    $actionsArray = $release->getActionsArray();    
    $outActions = array();

    $stageActions = $actionsArray[$stage];
    if(empty($stageActions))  {
      return;
    }
    $buildableActions = array();
    foreach ($stageActions as $action) {

      $command = $this->buildService->getCommandForAction($action['name']);
      if (!$command->isManualAction()) {
        $hasBuildable = TRUE;
        $buildableActions[] = $action['name'];
      }

    }
    return $buildableActions;
   
  }

}
